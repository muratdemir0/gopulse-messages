name: Go CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  pre-requirements:
    name: Pre-Requirements
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Check out code
      uses: actions/checkout@v4

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6.0.1
      with:
        version: v2.3.0
        
    - name: Run Unit Tests
      run: go test -v -tags=unit ./...

    - name: Run Integration Tests
      run: go test -v -tags=integration ./...

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@v1.1.4

    - name: Run Dependency Security Check
      run: govulncheck ./...

    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@v2.22.7
      
    - name: Run gosec
      run: gosec ./...

  build:
    name: Build & Docker
    needs: pre-requirements
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar

    - name: Set image output
      id: image
      run: echo "image=ghcr.io/${{ github.repository }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar
        retention-days: 1

  security-scan:
    name: Docker Security Scan
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp

    - name: Load Docker image
      run: docker load --input /tmp/image.tar

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy for high/critical vulnerabilities (fail on issues)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image }}
        format: 'table'
        severity: 'HIGH,CRITICAL'
        exit-code: '1'

  deploy:
    name: Deploy to DigitalOcean
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp

    - name: Load Docker image
      run: docker load --input /tmp/image.tar

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker image to registry
      run: |
        IMAGE_NAME="${{ needs.build.outputs.image }}"
        docker tag ${IMAGE_NAME} ${IMAGE_NAME}
        docker push ${IMAGE_NAME}

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Deploy to App Platform
      run: |
        # Deploy using Docker image from GitHub Container Registry
        # Replace YOUR_APP_ID with your actual DigitalOcean App ID
        # You should store your App ID as a secret in your repository settings
        IMAGE_URL="ghcr.io/${{ github.repository }}:${{ github.sha }}"
        doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} \
          --image="$IMAGE_URL" \
          --wait
